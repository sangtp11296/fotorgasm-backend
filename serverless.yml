

service: fotorgasm-backend

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  profile: sangtp11296
  memorySize: 128 # set the maximum memory of the Lambdas in Megabytes
  timeout: 10 # the timeout is 10 seconds (default is 6 seconds)
  stage: dev # setting the env stage to dev, this will be visible in the routes
  region: ap-southeast-1
  environment:
    fotorgasmImagesUploadBucket: ${self:custom.fotorgasmImagesUploadBucket}
    fotorgasmPublicDataBucket: ${self:custom.fotorgasmPublicDataBucket}
    region: ${self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
          - dynamadb:*
          - s3:*
          - ses:*
      Resource: '*'
  lambdaHashingVersion: 20201221
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'

layers:
  fotorgasmLayer:
    path: layers
  
custom:
  fotorgasmImagesUploadBucket: fotorgasm-images-upload-bucket
  fotorgasmPublicDataBucket: fotorgasm-public-data-bucket

functions:
  create:
    handler: lambdas/createHandler.createPost # point to exported create function is handler.js
    layers:
      - !Ref FotorgasmLayerLambdaLayer
    events:
      - http:
          path: posts # path will be domain.name.com/dev/posts
          method: post
          cors: true
  getOne:
    handler: lambdas/getOneHandler.getOne
    layers:
      - !Ref FotorgasmLayerLambdaLayer
    events:
      - http:
          path: posts/{id} # path will be domain.name.com/dev/posts/1
          method: get
          cors: true
  getAll:
    handler: lambdas/getAllHandler.getAll
    layers:
      - !Ref FotorgasmLayerLambdaLayer
    events:
      - http:
          path: posts
          method: get
          cors: true
  update:
    handler: lambdas/updateHandler.updatePost
    layers:
      - !Ref FotorgasmLayerLambdaLayer
    events:
      - http:
          path: posts/{id}
          method: put
          cors: true
  delete:
    handler: lambdas/deleteHandler.deletePost
    layers:
      - !Ref FotorgasmLayerLambdaLayer
    events:
      - http:
          path: posts/{id}
          method: delete
          cors: true
  register:
    handler: lambdas/admin/registerHandler.registerUser
    layers:
      - !Ref FotorgasmLayerLambdaLayer
    events:
      - http:
          path: register
          method: post
          cors: true
  login:
    handler: lambdas/admin/loginHandler.loginUser
    layers:
      - !Ref FotorgasmLayerLambdaLayer
    events:
      - http:
          path: login
          method: post
          cors: true
  getPresignedUrl:
    handler: lambdas/getPresignedUrl.getPresignedUrl
    layers:
      - !Ref FotorgasmLayerLambdaLayer
    events:
      - http:
          path: get-presigned-url # path will be domain.name.com/dev/posts
          method: post
          cors: true
  adminAvatarUpdate:
    handler: lambdas/admin/updateAvatarHandler.updateAvatarHandler
    layers:
      - !Ref FotorgasmLayerLambdaLayer
  userInfoUpdate:
    handler: lambdas/admin/updateInfoHandler.updateInfoHandler
    layers:
      - !Ref FotorgasmLayerLambdaLayer
    events:
      - http:
          path: admin/{id}
          method: put
          cors: true
  # Team member api
  createMemberHandler:
    handler: lambdas/team/createMemberHandler.createMemberHandler
    layers:
      - !Ref FotorgasmLayerLambdaLayer
    events:
      - http:
          path: team
          method: post
          cors: true
  updateMemberHandler:
    handler: lambdas/team/updateMemberHandler.updateMemberHandler
    layers:
      - !Ref FotorgasmLayerLambdaLayer
    events:
      - http:
          path: team
          method: put
          cors: true
  #Post API
  uploadDraftImage:
    handler: lambdas/post/getPresignedUrl.uploadDraftImage
    layers:
      - !Ref FotorgasmLayerLambdaLayer
    events:
      - http:
          path: upload-draft-image # path will be domain.name.com/dev/posts
          method: post
          cors: true
  getDraftImage:
    handler: lambdas/post/getPresignedUrl.getDraftImage
    layers:
      - !Ref FotorgasmLayerLambdaLayer
    events:
      - http:
          path: get-draft-image # path will be domain.name.com/dev/posts
          method: post
          cors: true


resources:
  Resources:   
    FotorgasmPublicDataBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.fotorgasmPublicDataBucket}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
              - "*"
              AllowedMethods:
                - GET
              AllowedOrigins:
                - "*"
    FotorgasmImagesUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.fotorgasmImagesUploadBucket}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - PUT
                - GET
                - POST
                - DELETE
              AllowedOrigins:
                - "*"


